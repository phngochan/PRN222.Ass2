@page
@model             IndexModel
@{
    ViewData["Title"] = "Quản lý đơn hàng";
}

<style>
    /* CSS cho hiệu ứng highlight khi có cập nhật */
    .update-highlight {
        animation: highlight-yellow 2s ease-out;
    }

    @@keyframes highlight-yellow {
        0% {
            background-color: #ffc107;
        }
        /* Màu vàng */
        100% {
            background-color: transparent;
        }
    }
</style>

<h2>Quản lý đơn hàng</h2>

@if (TempData["Message"] != null)
{
    <div class="alert alert-success">@TempData["Message"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

<form method="post" asp-page-handler="Create" class="mb-4">
    <div class="form-group">
        <label>Khách hàng</label>
        <select class="form-control" asp-for="CustomerId" required>
            @foreach (var c in Model.Customers)
            {
                <option value="@c.Id">@c.Name - @c.Phone</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label>Chọn xe</label>
        <select class="form-control" asp-for="VehicleId" required>
            @foreach (var v in Model.Vehicles)
            {
                if (v.InventoryQty > 0)
                {
                    <option value="@v.Id">@v.Model - Giá: @v.Price?.ToString("N0") đ - Còn: @v.InventoryQty</option>
                }
                else
                {
                    <option value="@v.Id" disabled>@v.Model - Hết hàng</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label>Số lượng</label>
        <input type="number" class="form-control" asp-for="Quantity" min="1" required />
    </div>
    <button type="submit" class="btn btn-primary">Tạo đơn hàng</button>
</form>

<form method="get" class="row mb-3">
    <div class="col-md-4">
        <input type="text" name="searchCustomer" value="@Model.SearchCustomer"
               class="form-control" placeholder="Tìm theo tên khách hàng..." />
    </div>
    <div class="col-md-4">
        <button type="submit" class="btn btn-success">Lọc</button>
        <a asp-page="./Index" class="btn btn-secondary">Reset</a>
    </div>
</form>

<div class="card">
    <div class="card-header">Danh sách đơn hàng</div>
    <div class="card-body">
        <table class="table table-bordered table-sm">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Khách hàng</th>
                    <th>Ngày đặt</th>
                    <th>Tổng tiền</th>
                    <th>Số lượng</th>
                    <th>Trạng thái</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody id="order-list-body">
                @foreach (var order in Model.PagedOrders)
                {
                    var paid = order.Payments?.Sum(p => p.Amount) ?? 0;
                    var total = order.TotalPrice ?? 0;
                    var isPaid = paid >= total;
                    var isCancelled = order.Status == 9;
                    var isActionable = !isPaid && !isCancelled;

                    var currentItem = order.OrderItems?.FirstOrDefault();
                    var currentQuantity = currentItem?.Quantity ?? 0;

                    <tr id="order-row-@order.Id">
                        <td>@order.Id</td>
                        <td>@order.Customer?.Name</td>
                        <td>@order.OrderDate?.ToString("dd/MM/yyyy")</td>
                        <td class="order-total-price">@order.TotalPrice?.ToString("N0") đ</td>
                        <td class="order-quantity">@currentQuantity</td>
                        <td class="order-status">
                            @if (isCancelled)
                            {
                                <span class="badge bg-dark">Đã hủy</span>
                            }
                            else if (isPaid)
                            {

                                <span class="badge bg-success">Đang xử lý</span>
                            }
                            else
                            {

                                <span class="badge bg-danger">Chưa thanh toán</span>
                            }
                        </td>
                        <td class="order-actions">
                            <form method="post" asp-page-handler="Pay" class="d-inline">
                                <input type="hidden" name="OrderId" value="@order.Id" />
                                <button type="submit" class="btn btn-sm btn-warning" @(isActionable ? null : "disabled")>Thanh toán</button>
                            </form>

                            <button type="button" class="btn btn-sm btn-primary"
                                    data-bs-toggle="modal" data-bs-target="#editModal-@order.Id"
                                    @(isActionable ? null : "disabled")>
                                Cập nhật
                            </button>

                            <form method="post" asp-page-handler="Cancel" class="d-inline">
                                <input type="hidden" name="OrderId" value="@order.Id" />
                                <button type="submit" class="btn btn-sm btn-danger" @(isActionable ? null : "disabled")>Hủy đơn</button>
                            </form>

                            <button type="button" class="btn btn-sm btn-info" data-bs-toggle="collapse" data-bs-target="#detail-@order.Id">Chi tiết</button>
                        </td>
                    </tr>
                    <tr class="collapse bg-light" id="detail-@order.Id">
                        <td colspan="7" class="order-detail-cell">
                            <strong>Chi tiết đơn:</strong>
                            <ul>
                                @{
                                    // Tính toán tổng giá trị của chi tiết đơn hàng
                                    var detailTotalPrice = currentItem?.UnitPrice * currentQuantity;
                                }
                                <li>
                                    Xe: @currentItem?.Vehicle?.Model - SL: @currentQuantity x @currentItem?.UnitPrice?.ToString("N0") đ
                                    = <span class="fw-bold">@detailTotalPrice?.ToString("N0") đ</span>
                                </li>
                            </ul>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <nav>
        </nav>
    </div>
</div>

@foreach (var order in Model.PagedOrders)
{
    var currentItem = order.OrderItems?.FirstOrDefault();
    var currentVehicleId = currentItem?.VehicleId ?? 0;
    var currentQuantity = currentItem?.Quantity ?? 0;

    <div class="modal fade" id="editModal-@order.Id" tabindex="-1" aria-labelledby="editModalLabel-@order.Id" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form method="post" asp-page-handler="Edit">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editModalLabel-@order.Id">Cập nhật đơn hàng #@order.Id</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" name="OrderId" value="@order.Id" />
                        <div class="form-group mb-3">
                            <label>Chọn xe</label>
                            <select class="form-control" name="VehicleId" required>
                                @foreach (var v in Model.Vehicles)
                                {
                                    bool isCurrentVehicle = v.Id == currentVehicleId;
                                    if (v.InventoryQty > 0 || isCurrentVehicle)
                                    {
                                        <option value="@v.Id" selected="@isCurrentVehicle">
                                            @v.Model - Giá: @v.Price?.ToString("N0") đ - Còn: @v.InventoryQty
                                        </option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Số lượng</label>
                            <input type="number" class="form-control" name="Quantity" value="@currentQuantity" min="1" required />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                        <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}
            </tbody>
        </table>

        <nav>
            <ul class="pagination">
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(Model.PageIndex == i ? "active" : "")">
                        <a class="page-link" asp-page="./Index" asp-route-pageIndex="@i" asp-route-searchCustomer="@Model.SearchCustomer">@i</a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script>
    $(document).ready(function () {
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/orderHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // 🟢 Khi nhận đơn hàng mới
        connection.on("ReceiveNewOrder", function (order) {
            console.log("📦 Đơn hàng mới:", order);
            // Reload lại trang để hiển thị đơn mới nhất cùng với modal và các chức năng đầy đủ.
            location.reload();
        });

        // 🟡 Khi nhận cập nhật trạng thái đơn hàng (Thanh toán / Hủy)
        connection.on("ReceiveOrderStatusUpdate", function (update) {
            console.log("🔁 Cập nhật trạng thái:", update);
            const row = $(`#order-row-${update.id}`);
            if (row.length > 0) {
                const statusCell = row.find(".order-status");
                let badgeHtml = '';

                if (update.status === "Đang xử lý") {
                    badgeHtml = '<span class="badge bg-success">Đang xử lý</span>';
                } else if (update.status === "Đã hủy") {
                    badgeHtml = '<span class="badge bg-dark">Đã hủy</span>';
                }

                statusCell.html(badgeHtml);

                // Vô hiệu hóa tất cả các nút hành động
                row.find(".order-actions button").prop('disabled', true);
            }
        });

        // 🟣 Khi nhận cập nhật chỉnh sửa đơn hàng (thay đổi xe, số lượng)
        connection.on("ReceiveOrderUpdate", function (data) {
            console.log("✏️ Cập nhật đơn hàng:", data);
            const row = $(`#order-row-${data.id}`);
            if (row.length > 0) {
                // Cập nhật dòng chính
                row.find(".order-total-price").text(data.totalPrice);
                row.find(".order-quantity").text(data.quantity);

                // Cập nhật dòng chi tiết
                const detailCell = $(`#detail-${data.id}`).find(".order-detail-cell");
                if(detailCell.length > 0) {
                    // Loại bỏ ký tự tiền tệ và dấu chấm để chuyển đơn giá thành số thực
                    const unitPriceString = data.unitPrice.replace(/\./g, '').replace(' đ', '');
                    const unitPriceNum = parseFloat(unitPriceString);
                    const quantityNum = parseInt(data.quantity);

                    // Tính toán tổng giá trị chi tiết
                    const totalDetailPriceNum = unitPriceNum * quantityNum;

                    // Định dạng lại tổng giá trị chi tiết thành chuỗi tiền tệ Việt Nam
                    const totalDetailPriceFormatted = isNaN(totalDetailPriceNum)
                        ? 'Lỗi định dạng'
                        : totalDetailPriceNum.toLocaleString('vi-VN') + ',000,000 đ';

                    const detailHtml = `
                        <strong>Chi tiết đơn:</strong>
                        <ul>
                            <li>
                                Xe: ${data.vehicleModel} - SL: ${data.quantity} x ${data.unitPrice}
                                = <span class="fw-bold">${totalDetailPriceFormatted}</span>
                            </li>
                        </ul>
                    `;
                    detailCell.html(detailHtml);
                }

                // Thêm hiệu ứng highlight để người dùng dễ nhận biết
                row.addClass("update-highlight");
                setTimeout(() => row.removeClass("update-highlight"), 2000);
            }
        });

        connection.start()
            .then(() => console.log("✅ Kết nối SignalR thành công"))
            .catch(err => console.error("❌ Lỗi SignalR:", err));
    });
</script>
